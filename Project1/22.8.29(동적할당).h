#include <stdio.h>
#include <stdlib.h> // 메모리 할당 함수 라이브러리
#include <time.h>


// 매개 변수는 함수 내부에서만 사용가능한 변수(1)
// 매개 변수가 포인터로 선언되면, 변수의 주소를 전달해야한다
 void Swap(int * x, int * y)
{
	// temp
	// [?] = x(?)
	int temp = *x;
	
	// x(20) = y(20)
	*x = *y;

	// y(10) = temp(10)
	*y = temp;

	// x 변수가 가리키는 주소와 y 변수가 가리키는 주소를 출력한닿ㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎ흐
	printf("매개 변수의 x주소 : %p, 매개 변수의 y주소 : %p\n", &x, &y);

}	// <== 함수가 종료되는 순간 매개 변수 x와 y값이 사라진다 

 void main()
{
	// 참조에 의한 호출
	/*
	// 함수 호출 시 전달되는 변수의 주소를 함수의 인수로 전달하는 방식
	int x = 10;
	int y = 20;

	printf("x 변수의 값 : %d  y 변수의 값 : %d\n", x, y);


	Swap(&x, &y);
	// 값의 주소가 바꿔지지않고 값의 복제본만 바꿔짐 [(1)참고)]
	printf("x 변수의 값 : %d  y 변수의 값 : %d\n", x, y);

	// 참조에 의한 호출은 매개 변수에 변수의 주소를 넘겨준 다음
	// 외부에 있는 변수의 주소가 참조되어 외부에 있는 변수에 영향을 끼칠 수 있다

	// 값에 의한 호출은 매개 변수에 값만 넘겨주므로 외부에 있는 변수의 값이 변경될 일이 없다
	*/

	// 동적 할당
	/*
	// 프로그램을 실행 중에 사용자가 필요한 만큼 메모리를 할당하는 작업

	// 4 byte 메모리
	// 포인터 변수 ptr
	
	// 스택             힙
	// ptr -------> [] [] [] []
	// 포인터 변수 ptr은 동적으로 할당한 메모리의 시작 주소를 가리킨다
    int * ptr = (int *)malloc(sizeof(int));
	// 메모리를 동적 할당할 때 주소를 범용 포인터로
	// 반환하기 때문에 자료형을 변환한 다음 메모리에 할당해야 한다 
	*ptr = 10;

	printf("ptr이 가리키는 주소 : &p\n", ptr);
	printf("ptr이 가리키는 값 : &d\n", ptr);

	// 동적 할당한 메모리는	free함수를 통해 해제해야 한다
	// 동적 할당한 메모리는 해제하지 않고 방치하게 되면 메모리 누수가 발생한다
	free(ptr);
	*/

	// 메모리
	// 코드 영역
	// 데이터 영역
	// 힙 영역 <- 동적 할당
	// 스택 영역

	// up ~ down
	// 컴퓨터가 랜덤한 숫자를 뽑는다
	// 우리가 scanf_s() 함수를 사용해서 값을 입력

    // 컴퓨터가 뽑은 랜덤한 값 : (33)
	// 20값을 입력 (컴퓨터가 뽑은 숫자보다 작습니다) hp -1;
	// 34값을 입력 (컴퓨터가 뽑은 숫자보다 큽니다) hp -1;

	int answer = 0;
	int life = 5;

	srand(time(NULL));

	int computer = rand() % 50 + 1;

	// 게임 업데이트 
	// life 변수가 0이 아니라면
	
	while (life != 0)
	{
		printf("컴퓨터가 가지고 있는 숫자를 입력해주세요\n");

		scanf_s("%d", &answer);

		if (answer == computer)
		{
			printf("게임에서 승리하였습니다");
			break; // while문에서 탈출한다
		}
		else if (answer > computer)
		{
			life--;
			printf("컴퓨터가 뽑은 숫자보다 큽니다\n");
		}
		else if (answer < computer)
		{
			life--;
			printf("컴퓨터가 뽑은 숫자보다 작습니다\n");
		}
		printf("현재 life : %d\n", life);
	}
	
	if (life == 0)
	{
		printf("게임에서 패배하였습니다");
	}
}

